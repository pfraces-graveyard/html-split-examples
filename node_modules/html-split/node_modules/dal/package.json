{
  "name": "dal",
  "version": "0.3.1",
  "description": "DOM Abstraction Layer",
  "main": "./lib/index.js",
  "dependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pfraces/dal.git"
  },
  "keywords": [
    "dal",
    "dom",
    "jquery"
  ],
  "author": {
    "name": "Pau Frac√©s"
  },
  "license": "MIT",
  "readme": "# DAL\n\nDOM Astraction Layer. A DOM manipulator micro-library\n\n## Featuring\n\n*   Less than 200 lines of annotated source\n*   Chainable API\n*   Dependency-free\n\n# Example\n\n```html\n<div id=\"content\">Bad news...</div>\n<script src=\"dal.js\"></script>\n```\n\n```javascript\nvar content = dal('content');\n\ncontent\n  .clear()\n  .add('h1', 'It works!')\n  .color('#F99', 'red')\n  .size({ width: '300px', height: '300px' });\n\nwhile (!content.full()) content.add('h1', 'foo');\ncontent.add('h1', 'bar');\n```\n\nIf you get\n\n    Bad news...\n\nplease, [create an issue](https://github.com/pfraces/dal/issues) ;)\n\nBut if it works you'll end with something like this\n\n![it works!](https://github.com/pfraces/dal/raw/master/itworks.png)\n\n# Install\n\n    $ npm install dal\n\n# Status\n\nDAL is a work-in-progress and is only intended for my personal use at this\ntime. \n\n# API\n\nThe object returned by the `dal` function is composed by an array of the\nselected DOM elements and a collection of methods for managing the array\n\nThere are a few boolean methods that obviously are not chainable but the\nrest of methods are all chainable\n\n**WIP:**\n\nCurrently the object returned by the `dal` function is just **one** DOM element\n**augmented** with the collection of methods\n\n## Selectors\n\n### el = dal(selector)\n\n`selector` _(Optional)_:\n\n*   _[String]_ Returns the element with `selector` as tag `id`\n*   _[DOM Element]_ If a DOM element is received, it will be augmented as well\n\nReturns the element `el` selected by `selector` and augmented with methods for\nits management\n\nIf no `selector` is especified, a `div` element is created and is returned,\nbeing detached from the `document.body` (so is invisible)\n\nYou can create an empty element and attach it to the `document.body` with\n`attach`\n\n    dal().attach();\n\n`el` is augmented with the following methods\n\n### el.sel(selector)\n\nThe selector function used by `dal()` is made available.\nThe difference is that while `dal` searches on all the elements in the\n`document`, `sel` only searches in the elements holded by `el`\n\n**WIP:**\n\nCurrently this method only returns a DOM element without being augmented, so\nit's very useless at this time. \n\nIt will become useful when subselection development is complete\n\n## Boolean methods\n\n### el.inside(target)\n\n`target`: _[DOM Element]_ Determines if `el` is descendant of `target`.\n\n### el.full()\n\nDetermines if `el` is overflowing its bounds\n\n### el.empty()\n\nDetermines if `el` has any child\n\n## Element management methods\n\n### el.attach()\n\nAttaches `el` to the `document.body` if it was not attached yet\n\n### el.detach()\n\nDettaches `el` from his parent if it has one\n\n### el.add(newEl, content)\n\n`newEl`:\n\n*   _[String]_ An element is created and attached\n\n        dal().add('h1', 'Hello world!')\n\n*   _[DOM Element]_ An existing DOM element. In this case `newEl` is cloned and\n    the clone is attached\n\n`content` _(Optional)_: _[String]_ Defauilt content for the new element\n\nAttaches a new element to `el`\n\n### el.del(target)\n\nIf `target` is descendant of `el`, `target` is detached from his parent\n\n### el.clear()\n\nRemoves all the children of `el`\n\n### el.copy()\n\nReturns a copy of itself excluding its children nodes\n\n### el.clone()\n\nReturns a clone of itself including its children nodes\n\n## CSS layout methods\n\n### el.show()\n\nMakes `el` visible (is if is attached to the `document.body`)\n\n### el.hide()\n\nMakes `el` invisible and ignored by the layout, but behaving as when visible\n\n### el.move(x, y)\n\nMakes the element absotule positioned at `(x, y)`\n\n## CSS style methods\n\n### el.color(opts)\n\n`opts`: _[Object]_\n\n*   `opts.bg`: Determines the backgroud color\n*   `opts.fg`: Determines the text color\n\nChanges the background and text color of `el`\n\n### el.size(opts)\n\n`opts`: _[Object]_\n\n*   `opts.width`: Determines the width of the element\n*   `opts.height`: Determines the height of the element\n\nChanges the size of `el`\n\n## Tag attribute methods\n\n### el.class.add(class)\n\n`class`: _[String]_ A CSS class to be added\n\nAdds `class` as a CSS class of `el`\n\n## Misc property methods\n\n### el.html(html)\n\nSets the `innerHTML` value of the element\n\n# Contribute\n\nGet the sources at github: http://github.com/pfraces/dal\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2012 [pfraces](http://github.com/pfraces)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "dal@0.3.1",
  "_from": "dal@*"
}
